---
# Git is needed for pulling down the template database
# initialization scripts.  This is only when a git repo is being
# used instead of local files.
- name: Install dependencies
  yum:
    name: git
    state: present
  when: pp_template_scripts_repo is defined

# Get teh git repo and put it where specified
- name: Get template database scripting repo
  git:
    repo: "{{ pp_template_scripts_repo }}"
    dest: "{{ pp_template_scripts_path }}"
    force: yes
    version: "{{ pp_template_scripts_version }}"
  when: pp_template_scripts_repo is defined

# Otherwise, if not using Git then get the files from
# the source_path
- name: Get template database scripts from file
  copy:
    src: "{{ pp_template_source_path }}/"
    dest: "{{ pp_template_scripts_path }}/"
    mode: 0700
    owner: "{{ pp_serviceaccount }}"
  when: pp_template_scripts_repo is not defined

# Create the template databases with specified settings
- name: Create template databases
  postgresql_db:
    login_user: "{{ pp_dba_username }}"
    login_password: "{{ pp_dba_password }}"
    name: "{{ item.name }}"
    owner: "{{ pp_dba_username }}"
    state: present
    port: "{{ pp_serverport }}"
  with_items: pp_template_dbs
  register: template_dbs

# Get root roles with specified settings, meant for inheriting
# permissions.
- name: Create postgres default roles
  postgresql_user:
    login_user: "{{ pp_dba_username }}"
    login_password: "{{ pp_dba_password }}"
    port: "{{ pp_serverport }}"
    name: "{{ item.name }}"
    role_attr_flags: "{{ item.privileges }}"
  with_items: pp_roles

# Execute the template DB initalization scripts
- name: Populate template DB's
  postgresql_exec:
    login_user: "{{ pp_dba_username }}"
    login_password: "{{ pp_dba_password }}"
    port: "{{ pp_serverport }}"
    db: "{{ item.item.name }}"
    script_file: "{{ pp_template_scripts_path }}/{{ item.item.init_script }}"
  with_items: template_dbs.results
  when: item.changed

# Configure default privileges for PUBLIC, other inheritable roles.
- name: Configure default privileges
  postgresql_privs:
    login: "{{ pp_dba_username }}"
    password: "{{ pp_dba_password }}"
    port: "{{ pp_serverport }}"
    database: "{{ item.db }}"
    objs: "{{ item.objs }}"
    privs: "{{ item.privs }}"
    roles: "{{ item.roles }}"
    schema: "{{ item.schema }}"
    type: "{{ item.type }}"
    state: "{{ item.state }}"
  with_items: pp_privs

### NOTE ###
# It seems that these operations must be done by a superuser,
# and without them ony the pp_dba_username user can create databases
# based on a given template.
###########

# Assert that template databases are indeed templates.
#- name: Turn on template flag
#  postgresql_exec:
#    login_user: "{{ pp_dba_username }}"
#    login_password: "{{ pp_dba_password }}"
#    port: "{{ pp_serverport }}"
#    db: postgres
#    script: "UPDATE pg_database SET datistemplate=true WHERE datname='{{ item.item.name }}'"
#  with_items: template_dbs.results

# Disallow connections to template databases
#- name: Turn off allowconn flag
#  postgresql_exec:
#    login_user: "{{ pp_dba_username }}"
#    login_password: "{{ pp_dba_password }}"
#    port: "{{ pp_serverport }}"
#    db: postgres
#    script: "UPDATE pg_database SET datallowconn=false WHERE datname='{{ item.item.name }}'"
#  with_items: template_dbs.results
